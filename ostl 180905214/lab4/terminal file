terminal file
$ gcc -o hello.c
gcc: fatal error: no input files
compilation terminated.
$ gcc -o hello hello.c
hello.c:2:9: fatal error: stdlib: No such file or directory
 #include<stdlib>
         ^~~~~~~~
compilation terminated.
$ gcc -o hello hello.c
$ ./hello 
Hello World
$ ^C
$ #include<stdio.h>     
$ void fred(int arg)
sh: 6: Syntax error: "(" unexpected
$ {
> printf("fred:we passed %d\n",arg);
sh: 7: Syntax error: word unexpected (expecting ")")
$ ^C
$ #include<stdio.h>     
$ void fred(int arg)
$ sh: 8: Syntax error: "(" unexpected
$ ^[[A^[[D^[[D^C
$  #include<stdio.h>     
$ void fred(int arg)
$ sh: 9: Syntax error: "(" unexpected
$ ^C
$ #include<stdio.h>
$ void fred(int arg)
sh: 10: Syntax error: "(" unexpected
$ gcc -c bill.c fred.c
$ ls *.o
bill.o	fred.o
$ /* This is lib.h.It declares the functions fred and bill for users*/
sh: 12: /bin: Permission denied
$ ^C
$ gcc -c helloworld.c
$ gcc -o helloworld helloworld.o bill.o
$ ./program
sh: 15: ./program: not found
$ ./helloworld
bill: we passed hello world
$ ^C
$ ar crv libfoo.a bill.o fred.o
a - bill.o
a - fred.o
$ ranlib libfoo.a
$ gcc -o helloworld helloworld.o libfoo.a
$ ./helloworld
bill: we passed hello world
$ gcc -o helloworld helloworld.o -L. -lfoo
$ ldd hellowolrd
ldd: ./hellowolrd: No such file or directory
$ ldd helloworld  
	linux-vdso.so.1 (0x00007fff483be000)
	libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f5cb1a34000)
	/lib64/ld-linux-x86-64.so.2 (0x00007f5cb2027000)
$ make -f Makefile1
Makefile1:2: *** missing separator.  Stop.
$ make -f Makefile1
make: *** No rule to make target 'main.c', needed by 'main.o'.  Stop.
$ touch a.h
$ touch b.h
$ touch c.h
$ make -f Makefile1
gcc -c main.c
cc    -c -o 2.o 2.c
cc    -c -o 3.o 3.c
gcc -o myapp main.o 2.0 3.o
gcc: error: 2.0: No such file or directory
Makefile1:2: recipe for target 'myapp' failed
make: *** [myapp] Error 1
$ make -f Makefile1
gcc -o myapp main.o 2.0 3.o
gcc: error: 2.0: No such file or directory
Makefile1:2: recipe for target 'myapp' failed
make: *** [myapp] Error 1
$ make -f Makefile1	gcc -c main.c	gcc -c 2.c	gcc -c 3.c  gcc -o myapp main.o 2.0 3.0
make: invalid option -- 'c'
make: invalid option -- 'c'
make: invalid option -- 'c'
Usage: make [options] [target] ...
Options:
  -b, -m                      Ignored for compatibility.
  -B, --always-make           Unconditionally make all targets.
  -C DIRECTORY, --directory=DIRECTORY
                              Change to DIRECTORY before doing anything.
  -d                          Print lots of debugging information.
  --debug[=FLAGS]             Print various types of debugging information.
  -e, --environment-overrides
                              Environment variables override makefiles.
  --eval=STRING               Evaluate STRING as a makefile statement.
  -f FILE, --file=FILE, --makefile=FILE
                              Read FILE as a makefile.
  -h, --help                  Print this message and exit.
  -i, --ignore-errors         Ignore errors from recipes.
  -I DIRECTORY, --include-dir=DIRECTORY
                              Search DIRECTORY for included makefiles.
  -j [N], --jobs[=N]          Allow N jobs at once; infinite jobs with no arg.
  -k, --keep-going            Keep going when some targets can't be made.
  -l [N], --load-average[=N], --max-load[=N]
                              Don't start multiple jobs unless load is below N.
  -L, --check-symlink-times   Use the latest mtime between symlinks and target.
  -n, --just-print, --dry-run, --recon
                              Don't actually run any recipe; just print them.
  -o FILE, --old-file=FILE, --assume-old=FILE
                              Consider FILE to be very old and don't remake it.
  -O[TYPE], --output-sync[=TYPE]
                              Synchronize output of parallel jobs by TYPE.
  -p, --print-data-base       Print make's internal database.
  -q, --question              Run no recipe; exit status says if up to date.
  -r, --no-builtin-rules      Disable the built-in implicit rules.
  -R, --no-builtin-variables  Disable the built-in variable settings.
  -s, --silent, --quiet       Don't echo recipes.
  -S, --no-keep-going, --stop
                              Turns off -k.
  -t, --touch                 Touch targets instead of remaking them.
  --trace                     Print tracing information.
  -v, --version               Print the version number of make and exit.
  -w, --print-directory       Print the current directory.
  --no-print-directory        Turn off -w, even if it was turned on implicitly.
  -W FILE, --what-if=FILE, --new-file=FILE, --assume-new=FILE
                              Consider FILE to be infinitely new.
  --warn-undefined-variables  Warn when an undefined variable is referenced.

This program built for x86_64-pc-linux-gnu
Report bugs to <bug-make@gnu.org>
$ make -f Makefile1
gcc -o myapp main.o 2.0 3.o
gcc: error: 2.0: No such file or directory
Makefile1:2: recipe for target 'myapp' failed
make: *** [myapp] Error 1
$ make -f Makefile1     gcc -c main.c	gcc -c 2.c	gcc -c 3.c  gcc -o myapp main.o 2.o 3.o        
make: invalid option -- 'c'
make: invalid option -- 'c'
make: invalid option -- 'c'
Usage: make [options] [target] ...
Options:
  -b, -m                      Ignored for compatibility.
  -B, --always-make           Unconditionally make all targets.
  -C DIRECTORY, --directory=DIRECTORY
                              Change to DIRECTORY before doing anything.
  -d                          Print lots of debugging information.
  --debug[=FLAGS]             Print various types of debugging information.
  -e, --environment-overrides
                              Environment variables override makefiles.
  --eval=STRING               Evaluate STRING as a makefile statement.
  -f FILE, --file=FILE, --makefile=FILE
                              Read FILE as a makefile.
  -h, --help                  Print this message and exit.
  -i, --ignore-errors         Ignore errors from recipes.
  -I DIRECTORY, --include-dir=DIRECTORY
                              Search DIRECTORY for included makefiles.
  -j [N], --jobs[=N]          Allow N jobs at once; infinite jobs with no arg.
  -k, --keep-going            Keep going when some targets can't be made.
  -l [N], --load-average[=N], --max-load[=N]
                              Don't start multiple jobs unless load is below N.
  -L, --check-symlink-times   Use the latest mtime between symlinks and target.
  -n, --just-print, --dry-run, --recon
                              Don't actually run any recipe; just print them.
  -o FILE, --old-file=FILE, --assume-old=FILE
                              Consider FILE to be very old and don't remake it.
  -O[TYPE], --output-sync[=TYPE]
                              Synchronize output of parallel jobs by TYPE.
  -p, --print-data-base       Print make's internal database.
  -q, --question              Run no recipe; exit status says if up to date.
  -r, --no-builtin-rules      Disable the built-in implicit rules.
  -R, --no-builtin-variables  Disable the built-in variable settings.
  -s, --silent, --quiet       Don't echo recipes.
  -S, --no-keep-going, --stop
                              Turns off -k.
  -t, --touch                 Touch targets instead of remaking them.
  --trace                     Print tracing information.
  -v, --version               Print the version number of make and exit.
  -w, --print-directory       Print the current directory.
  --no-print-directory        Turn off -w, even if it was turned on implicitly.
  -W FILE, --what-if=FILE, --new-file=FILE, --assume-new=FILE
                              Consider FILE to be infinitely new.
  --warn-undefined-variables  Warn when an undefined variable is referenced.

This program built for x86_64-pc-linux-gnu
Report bugs to <bug-make@gnu.org>
$ make -f Makefile1
gcc -o myapp main.o 2.0 3.o
gcc: error: 2.0: No such file or directory
Makefile1:2: recipe for target 'myapp' failed
make: *** [myapp] Error 1
$ ^C
$ make -f Makefile1	gcc -c main.c	gcc -c 2.c	gcc -c 3.c  gcc -o myapp main.o 2.o 3.o        
make: invalid option -- 'c'
make: invalid option -- 'c'
make: invalid option -- 'c'
Usage: make [options] [target] ...
Options:
  -b, -m                      Ignored for compatibility.
  -B, --always-make           Unconditionally make all targets.
  -C DIRECTORY, --directory=DIRECTORY
                              Change to DIRECTORY before doing anything.
  -d                          Print lots of debugging information.
  --debug[=FLAGS]             Print various types of debugging information.
  -e, --environment-overrides
                              Environment variables override makefiles.
  --eval=STRING               Evaluate STRING as a makefile statement.
  -f FILE, --file=FILE, --makefile=FILE
                              Read FILE as a makefile.
  -h, --help                  Print this message and exit.
  -i, --ignore-errors         Ignore errors from recipes.
  -I DIRECTORY, --include-dir=DIRECTORY
                              Search DIRECTORY for included makefiles.
  -j [N], --jobs[=N]          Allow N jobs at once; infinite jobs with no arg.
  -k, --keep-going            Keep going when some targets can't be made.
  -l [N], --load-average[=N], --max-load[=N]
                              Don't start multiple jobs unless load is below N.
  -L, --check-symlink-times   Use the latest mtime between symlinks and target.
  -n, --just-print, --dry-run, --recon
                              Don't actually run any recipe; just print them.
  -o FILE, --old-file=FILE, --assume-old=FILE
                              Consider FILE to be very old and don't remake it.
  -O[TYPE], --output-sync[=TYPE]
                              Synchronize output of parallel jobs by TYPE.
  -p, --print-data-base       Print make's internal database.
  -q, --question              Run no recipe; exit status says if up to date.
  -r, --no-builtin-rules      Disable the built-in implicit rules.
  -R, --no-builtin-variables  Disable the built-in variable settings.
  -s, --silent, --quiet       Don't echo recipes.
  -S, --no-keep-going, --stop
                              Turns off -k.
  -t, --touch                 Touch targets instead of remaking them.
  --trace                     Print tracing information.
  -v, --version               Print the version number of make and exit.
  -w, --print-directory       Print the current directory.
  --no-print-directory        Turn off -w, even if it was turned on implicitly.
  -W FILE, --what-if=FILE, --new-file=FILE, --assume-new=FILE
                              Consider FILE to be infinitely new.
  --warn-undefined-variables  Warn when an undefined variable is referenced.

This program built for x86_64-pc-linux-gnu
Report bugs to <bug-make@gnu.org>
$ make -f Makefile1	gcc -c main.c	gcc -c 2.c	gcc ^Z                                 
$ make -f Makefile1
gcc -o myapp main.o 2.0 3.o
gcc: error: 2.0: No such file or directory
Makefile1:2: recipe for target 'myapp' failed
make: *** [myapp] Error 1
$ make -f Makefile1	gcc -c main.c	gcc -c 2.c	gcc ^C                                 
$ make -f Makefile1
gcc -o myapp main.o 2.o 3.o
